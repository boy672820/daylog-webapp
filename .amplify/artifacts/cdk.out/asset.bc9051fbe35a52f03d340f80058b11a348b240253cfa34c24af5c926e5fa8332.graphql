type Daily {
  userId: ID!
  date: AWSDate!
  content: String
  createdDate: AWSDateTime
  updatedDate: AWSDateTime
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input AmplifyAIConversationTurnErrorInput {
  errorType: String!
  message: String!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelDailyConnection {
  items: [Daily]!
  nextToken: String
}

input ModelDailyFilterInput {
  userId: ModelIDInput
  date: ModelStringInput
  content: ModelStringInput
  createdDate: ModelStringInput
  updatedDate: ModelStringInput
  id: ModelIDInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelDailyFilterInput]
  or: [ModelDailyFilterInput]
  not: ModelDailyFilterInput
}

type Query {
  getDaily(userId: ID!, date: AWSDate!): Daily
  listDailies(userId: ID, date: ModelStringKeyConditionInput, filter: ModelDailyFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelDailyConnection
}

input ModelDailyConditionInput {
  content: ModelStringInput
  createdDate: ModelStringInput
  updatedDate: ModelStringInput
  and: [ModelDailyConditionInput]
  or: [ModelDailyConditionInput]
  not: ModelDailyConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateDailyInput {
  userId: ID!
  date: AWSDate!
  content: String
  createdDate: AWSDateTime
  updatedDate: AWSDateTime
}

input UpdateDailyInput {
  userId: ID!
  date: AWSDate!
  content: String
  createdDate: AWSDateTime
  updatedDate: AWSDateTime
}

input DeleteDailyInput {
  userId: ID!
  date: AWSDate!
}

type Mutation {
  createDaily(input: CreateDailyInput!, condition: ModelDailyConditionInput): Daily
  updateDaily(input: UpdateDailyInput!, condition: ModelDailyConditionInput): Daily
  deleteDaily(input: DeleteDailyInput!, condition: ModelDailyConditionInput): Daily
}

input ModelSubscriptionDailyFilterInput {
  userId: ModelSubscriptionIDInput
  date: ModelSubscriptionStringInput
  content: ModelSubscriptionStringInput
  createdDate: ModelSubscriptionStringInput
  updatedDate: ModelSubscriptionStringInput
  id: ModelSubscriptionIDInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionDailyFilterInput]
  or: [ModelSubscriptionDailyFilterInput]
}

type Subscription {
  onCreateDaily(filter: ModelSubscriptionDailyFilterInput): Daily @aws_subscribe(mutations: ["createDaily"])
  onUpdateDaily(filter: ModelSubscriptionDailyFilterInput): Daily @aws_subscribe(mutations: ["updateDaily"])
  onDeleteDaily(filter: ModelSubscriptionDailyFilterInput): Daily @aws_subscribe(mutations: ["deleteDaily"])
}

input ModelStringKeyConditionInput {
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  between: [String]
  beginsWith: String
}
